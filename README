/blink01:

    This directory contains a bare metal code that blinks a led on gpio4.
    To run the code on your raspberry pi zero 2W, you need to format the SD as FAT32 and add the following files:
    
    bootcode.bin
    kernel8.img
    start.elf

    The "bootcode.bin" and "start.elf" were obtained from raspberry pi official repository:
    https://github.com/raspberrypi/firmware/tree/master/boot

    To compile it, just run "make" on blinker01 directory.

/timer_blinker01:

    This directory contains a bare metal code that blinks a led on gpio4 using the system timer.
    To run the code on your raspberry pi zero 2W, you need to format the SD as FAT32 and add the following files:
    
    kernel8.img

    The "bootcode.bin" and "start.elf" were obtained from raspberry pi official repository:
    https://github.com/raspberrypi/firmware/tree/master/boot

    To compile it, just run "make" on timer_blinker01 directory.

/watchdog:

    This directory contains a bare metal code that starts the chip's watchdog as example.
    To run the code on your raspberry pi zero 2W, you need to format the SD as FAT32 and add the following files:
    
    kernel8.img

    The "bootcode.bin" and "start.elf" were obtained from raspberry pi official repository:
    https://github.com/raspberrypi/firmware/tree/master/boot

    To compile it, just run "make" on watchdog directory.

/uart01:

    This directory contains a bare metal code that implements a serial communication.
    To run the code on your raspberry pi zero 2W, you need to format the SD as FAT32 and add the following files:
    
    config.txt
    kernel8.img

    The "bootcode.bin" and "start.elf" were obtained from raspberry pi official repository:
    https://github.com/raspberrypi/firmware/tree/master/boot

    To compile it, just run "make" on uart01 directory.
